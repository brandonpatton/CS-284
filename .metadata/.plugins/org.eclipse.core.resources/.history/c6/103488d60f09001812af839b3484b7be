package hw1;

import static org.junit.Assert.assertEquals;

//Brandon Patton
//CS 284A
//I pledge my honor that I have abided by the Stevens Honor System

public class BinaryNumber{
	//Data Fields
	private int[] data;  //This is the binary number
	private boolean overflow;  //This is the field that handles 
							   //the overflow for carries in binary addition
	
	//Constructors
	public BinaryNumber(int length) {
		int[] newBinaryArray = new int[length];
		data = newBinaryArray;
	}
	
	public BinaryNumber(String str) {
		int[] newBinaryArray = new int[str.length()];
		for(int i = 0; i < str.length(); i++) {
			newBinaryArray[i] = java.lang.Character.getNumericValue(str.charAt(i));
		}
		data = newBinaryArray;
	}
	
	//Methods
	
	public int getLength() {
		return data.length;
	}
	
	public int getDigit(int index) {		//throw error here??????
		if(index < 0 || index > data.length) {
			System.out.println("Error: Index exceeds length of current binary number.");
			return -1; //Only executes if index is out of range
			
		} else {
			
			return data[index];
		}
	}
	public int toDecimal(){
		int decimal = 0;
		for (int i = 0; i < data.length; i++) {
			if (data[i]==1) {
				decimal += Math.pow(2, i);
			}
		}
		return decimal;
	}
	
	public BinaryNumber shiftR(int amount) {
		BinaryNumber shiftBinary = new BinaryNumber(data.length + amount);
		for (int i = amount; i < shiftBinary.getLength(); i++) {
			shiftBinary.data[i] = data[i-amount];
			
		}
		this.data = shiftBinary.data;
		return this;
	}
	public BinaryNumber add(BinaryNumber aBinaryNumber) {
		int Carry = 0;
		BinaryNumber result = new BinaryNumber(data.length);
		if(data.length != aBinaryNumber.getLength()) {
			System.out.println("Error: Binary Numbers entered are not the same length.");
			throw new ArrayIndexOutOfBoundsException();
		} else {
			for(int i = 0; i < data.length; i++) {
				 if (Carry + data[i] + aBinaryNumber.data[i] == 2) { 
					 Carry = 1;
					 result.data[i] = 0;
				 } else if (Carry + data[i] + aBinaryNumber.data[i] == 0) {
					 Carry = 0;
					 result.data[i] = 0;
				 } else if (Carry + data[i] + aBinaryNumber.data[i] == 3) {
					 Carry = 1;
					 result.data[i] = 1;
				 } else {
					 Carry = 0;
					 result.data[i] = 1;
				 }
			}
			if (Carry == 1) {
				overflow = true;
				return result;
			}
			else {
				return result;
			}
		}
		}
	
	public void clearOverflow() {
		overflow = false;
	}
	
	public String toString() {
		if (overflow == true) {
			return "Overflow";
		}
		else { 
			String binaryString = "";
			for (int i = 0; i < data.length; i++) {
				binaryString += data[i];
			}
			return binaryString;
			}
		}
	public static void main(String[] args) {
		
	}
}


	
